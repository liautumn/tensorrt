cmake_minimum_required(VERSION 3.28)
project(tensorrt CUDA CXX)

# CUDA 配置
set(CMAKE_CUDA_ARCHITECTURES 60 61 62 70 72 75 86 89 90)
set(CMAKE_CUDA_COMPILER /usr/local/cuda/bin/nvcc)  # 使用符号链接路径
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CUDA_STANDARD 17)

# 查找 OpenCV
find_package(OpenCV REQUIRED)

# 查找 TensorRT（自动检测系统安装路径）
find_package(TensorRT REQUIRED)
message(STATUS "Found TensorRT: ${TensorRT_LIBRARY}")

# 自动获取 CUDA 路径
get_filename_component(CUDA_DIR "${CMAKE_CUDA_COMPILER}" DIRECTORY)
get_filename_component(CUDA_DIR "${CUDA_DIR}" DIRECTORY)  # 获取 /usr/local/cuda

# 包含路径配置
include_directories(
        ${CMAKE_CURRENT_SOURCE_DIR}/include
        ${OpenCV_INCLUDE_DIRS}
        ${TensorRT_INCLUDE_DIRS}
        ${CUDA_DIR}/include
        /usr/include/x86_64-linux-gnu  # 补充系统头文件路径
)

# 链接目录配置
link_directories(
        ${TensorRT_LIBRARY_DIRS}
        ${CUDA_DIR}/lib64
        /usr/lib/x86_64-linux-gnu  # 系统库路径
)

# 目标配置
add_executable(${PROJECT_NAME}
        src/BaseMemory.cpp
        src/Infer.cpp
        src/Logger.cpp
        src/Postprocess.cu
        src/Preprocess.cu
        src/Timer.cpp
        src/Yolo.cpp
        src/example/Config.h
        src/example/Main.cpp
        src/example/Multi.cpp
)

# 链接库配置
target_link_libraries(${PROJECT_NAME}
        ${OpenCV_LIBS}
        nvinfer
        nvonnxparser
        cudart
        cuda
        ${CUDA_LIBRARIES}
)

# 高级配置
set_target_properties(${PROJECT_NAME} PROPERTIES
        CUDA_SEPARABLE_COMPILATION ON
        CUDA_RESOLVE_DEVICE_SYMBOLS ON
)

# 安装后检查（可选）
if(CMAKE_BUILD_TYPE STREQUAL "Release")
    add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
            COMMAND ${CMAKE_STRIP} $<TARGET_FILE:${PROJECT_NAME}>
    )
endif()